import tkinter as tk
from tkinter import scrolledtext
from tkinter import filedialog
from reportlab.lib.pagesizes import letter
from reportlab.platypus import SimpleDocTemplate, Paragraph
from reportlab.lib.styles import getSampleStyleSheet

# Constants
LINES_PER_PAGE = 30  # Adjust this as needed

def copy_text():
    text.clipboard_clear()
    text.clipboard_append(text.get(tk.SEL_FIRST, tk.SEL_LAST))

def paste_text():
    text.insert(tk.INSERT, text.clipboard_get())

def select_all_text():
    text.tag_add(tk.SEL, "1.0", tk.END)

def cut_text():
    copy_text()
    text.delete(tk.SEL_FIRST, tk.SEL_LAST)

def open_file():
    file_path = filedialog.askopenfilename(filetypes=[("Text files", "*.txt")])
    if file_path:
        with open(file_path, 'r') as file:
            text.delete(1.0, tk.END)
            text.insert(tk.INSERT, file.read())

def save_file():
    file_path = filedialog.asksaveasfilename(filetypes=[("Text files", "*.txt")])
    if file_path:
        with open(file_path, 'w') as file:
            file.write(text.get(1.0, tk.END))

def set_font_size(size):
    text.config(font=("Arial", size))

def insert_page_break():
    text.insert(tk.INSERT, '\n' + '-' * 40 + ' Page Break ' + '-' * 40 + '\n')

def create_pdf():
    text_print = text.get(1.0, tk.END)
    
    try:
        pdf_file = filedialog.asksaveasfilename(filetypes=[("PDF files", "*.pdf")])
        if pdf_file:
            doc = SimpleDocTemplate(pdf_file, pagesize=letter)
            styles = getSampleStyleSheet()
            story = []
            lines = text_print.split('\n')
            line_count = 0

            for line in lines:
                if line_count >= LINES_PER_PAGE:
                    story.append(Paragraph('<br/><br/><br/><br/><br/><br/>', styles['Normal']))
                    line_count = 0

                story.append(Paragraph(line, styles['Normal']))
                line_count += 1

            doc.build(story)
    except Exception as e:
        indicator_var.set(f"Error: {e}")

root = tk.Tk()
root.title("Word Processor")

menu = tk.Menu(root)
root.config(menu=menu)

file_menu = tk.Menu(menu)
menu.add_cascade(label="File", menu=file_menu)
file_menu.add_command(label="Open", command=open_file)
file_menu.add_command(label="Save As", command=save_file)
file_menu.add_separator()
file_menu.add_command(label="Exit", command=root.quit)

edit_menu = tk.Menu(menu)
menu.add_cascade(label="Edit", menu=edit_menu)
edit_menu.add_command(label="Copy", command=copy_text)
edit_menu.add_command(label="Paste", command=paste_text)
edit_menu.add_command(label="Select All", command=select_all_text)
edit_menu.add_command(label="Cut", command=cut_text)

font_menu = tk.Menu(menu)
menu.add_cascade(label="Font", menu=font_menu)
for size in range(8, 41):
    font_menu.add_command(label=str(size), command=lambda size=size: set_font_size(size))

text = scrolledtext.ScrolledText(root, wrap=tk.WORD, width=40, height=10, font=("Arial", 12))
text.pack()

# Create PDF button
create_pdf_button = tk.Button(root, text="Create PDF", command=create_pdf)
create_pdf_button.pack()

# Indicator for PDF creation status
indicator_var = tk.StringVar()
indicator_label = tk.Label(root, textvariable=indicator_var, padx=10)
indicator_label.pack()

root.mainloop()
